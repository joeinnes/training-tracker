(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"./jsx/trainingadd.js":[function(require,module,exports){
/* ==== Required dependencies ==== */
/* components/Header, components/TrainingAdd */

Header = require('./components/header.js');
TrainingAdd = require('./components/trainingadd.js');

React.render(
  React.createElement(Header, null),
  document.getElementById('header')
);

React.render(
  React.createElement(TrainingAdd, null),
  document.getElementById('trainingadd')
);


},{"./components/header.js":"/Users/joe/Web Development/employee-training-tracker/public/jsx/components/header.js","./components/trainingadd.js":"/Users/joe/Web Development/employee-training-tracker/public/jsx/components/trainingadd.js"}],"/Users/joe/Web Development/employee-training-tracker/public/jsx/components/header.js":[function(require,module,exports){
var Header = React.createClass({displayName: "Header",
  render: function () {
    return (
      React.createElement("nav", {className: "navbar navbar-default navbar-fixed-top"}, 
    React.createElement("div", {className: "container-fluid"}, 
      React.createElement("div", {className: "navbar-header"}, 
        React.createElement("a", {className: "navbar-brand", href: "index.html"}, 
          React.createElement("p", null, "Employee Training Tracker")
        ), 
        React.createElement("ul", {className: "nav navbar-nav"}, 
        React.createElement("li", null, React.createElement("a", {href: "trainingadd.html"}, "Add Training Session")), 
        React.createElement("li", null, React.createElement("a", {href: "traininglog.html"}, "Training Log")), 
        React.createElement("li", null, React.createElement("a", {href: "userlist.html"}, "User List")), 
        React.createElement("li", null, React.createElement("a", {href: "traininglist.html"}, "Training List"))
        )
      )
    )
  )
  )
  }
});

module.exports = Header;


},{}],"/Users/joe/Web Development/employee-training-tracker/public/jsx/components/itemlist.js":[function(require,module,exports){
var ItemList = React.createClass({displayName: "ItemList",
  getInitialState: function() {
    return { selectable: false }; // Default false to being a selectable list
  },
  render: function() {
    var itemNodes = "";
    var multiple = true;
    if ( this.props.single ) {
      multiple = false;
    }
    if ( this.props.selectable ) {
      // console.log(this.props.data);
      if (this.props.items) {
        itemNodes = this.props.items.map(function (item) {
          return (
            React.createElement("option", {value: item}, item)
          );
        });
      } else {
        itemNodes = "";
      }
    return (
      React.createElement("select", {id: this.props.componentId, multiple: multiple, className: "itemListSelectable form-control"}, 
        itemNodes
      )
    );
  } else {
    if (this.props.items) {
      itemNodes = this.props.items.map(function (item) {
        return (
          React.createElement("li", null, item)
        );
      });
    } else {
      itemNodes = "";
    }
    return (
      React.createElement("ul", {className: "itemList"}, 
        itemNodes
      )
    );
  }
}
});

module.exports = ItemList;


},{}],"/Users/joe/Web Development/employee-training-tracker/public/jsx/components/trainingadd.js":[function(require,module,exports){
/* ==== Required dependencies ==== */

var ItemList = require('./itemlist.js');
/* ItemList */

var TrainingAdd = React.createClass({displayName: "TrainingAdd",
  getInitialState: function() {
    return { trainees: [], traineeData: {}, trainers: [], payload: {}, trainerData: {}, trainingData: [] }
  },
  handleSubmit: function(e) {
    e.preventDefault();
    nanobar.go(10);
    var payload = {};
    payload.coursename = $('#coursename').val();
    payload.trainername = $('#trainername').val();
    nanobar.go(25);
    payload.trainees = $('#trainees').val();
    payload.starttime = moment($('#starttime').val(), "DD/MM/YYYY HH:mm").unix();
    nanobar.go(40);
    payload.endtime = moment($('#endtime').val(), "DD/MM/YYYY HH:mm").unix();
    var duration = (payload.endtime - payload.starttime)/60;
    if ( payload.coursename && payload.trainername && payload.trainees && payload.starttime && payload.endtime && duration > 0 ) {
      swal({
        title: "Training added",
        text: payload.coursename + ' has been added to the database, with the following attendees: "' + payload.trainees + '", taking ' + duration + ' minutes with ' + payload.trainername + ' leading the course.',
        type: "success",
        confirmButtonText: "OK" });
    } else {
      swal({
        title: "There was a problem",
        text: "Please make sure all fields are filled in, and that the end time is after the start time.",
        type: "error",
        confirmButtonText: "OK" });
    }
    nanobar.go(80);
    for ( var i = 0; i < payload.trainees.length; i++ ) {
      var traineename = payload.trainees[i];
      var newPayload = {};
      newPayload.completed = payload.coursename;
      console.log("I'm gonna PUT " + newPayload.completed + " to http://dev.local/api/users/name/" + traineename + '!');
      $.ajax({url: 'http://dev.local/api/users/name/'+ traineename, type: "PUT", data: newPayload});
    }
    nanobar.go(100);
  },
  componentDidMount: function() {
    $.get('http://dev.local/api/users/?by=name&order=asc', function(result) {
      if (this.isMounted()) {
        this.setState({trainerData: result});
        var trainers = [];
        for ( var i = 0; i < this.state.trainerData.length; i++ ) {
          if ( this.state.trainerData[i].type === 1 || this.state.trainerData[i].type === 0 ) {
            trainers.push(this.state.trainerData[i].name);
          }
        this.setState({trainers: trainers})
        }
        $('select').multiselect('rebuild');
      }
    }.bind(this));
    // Calling the API twice is not the fastest way to do this...
    $.get('http://dev.local/api/users?by=name&order=asc', function(result) {
      if (this.isMounted()) {
        this.setState({traineeData: result});
        var trainees = [];
        for ( var i = 0; i < this.state.traineeData.length; i++ ) {
          if ( this.state.traineeData[i].type === 2 ) {
            trainees.push(this.state.traineeData[i].name);
          }
        this.setState({trainees: trainees})
        }
        $('select').multiselect('rebuild');
      }
    }.bind(this));
    $.get('http://dev.local/api/trainings/?by=name&order=asc', function(result) {
      if (this.isMounted()) {
        this.setState({trainingData: namesFromObj(result)});
        $('select').multiselect('rebuild');
      }
    }.bind(this));
    $('select').multiselect({
      maxHeight: 600,
      includeSelectAllOption: true,
      enableFiltering: true
    });
    $('select').multiselect({
      maxHeight: 600,
      includeSelectAllOption: true,
      enableFiltering: true});
    $('#starttime').datetimepicker({format: "DD/MM/YYYY HH:mm", sideBySide: true});
    $('#endtime').datetimepicker({format: "DD/MM/YYYY HH:mm", sideBySide: true});
  },
  render: function() {
    return (
      React.createElement("div", {className: "jumbotron"}, 
      React.createElement("h1", null, "Add a session!"), 
        React.createElement("form", {className: "trainingAddForm", onSubmit: this.handleSubmit}, 
        React.createElement("div", {className: "row"}, 
        React.createElement("div", {className: "col-md-6"}, 
          React.createElement("div", {className: "form-group"}, 
            React.createElement("label", {for: "coursename"}, "Course name"), React.createElement("br", null), 
              React.createElement(ItemList, {componentId: "coursename", selectable: true, single: true, items: this.state.trainingData})
          ), 
          React.createElement("div", {className: "form-group"}, 
            React.createElement("label", {for: "summary"}, "Trainer"), React.createElement("br", null), 
              React.createElement(ItemList, {componentId: "trainername", single: true, selectable: true, items: this.state.trainers})
          ), 
          React.createElement("div", {className: "form-group"}, 
            React.createElement("label", {for: "user-list"}, "Trainees"), React.createElement("br", null), 
            React.createElement(ItemList, {componentId: "trainees", selectable: true, items: this.state.trainees})
          )
          ), 
          React.createElement("div", {className: "col-md-6"}, 
          React.createElement("div", {className: "form-group"}, 
            React.createElement("label", {for: "start-time"}, "Start"), React.createElement("br", null), 
            React.createElement("input", {type: "text", className: "form-control", id: "starttime"})
          ), 
          React.createElement("div", {className: "form-group"}, 
            React.createElement("label", {for: "end-time"}, "End"), React.createElement("br", null), 
            React.createElement("input", {type: "text", className: "form-control", id: "endtime"})
          ), 
          React.createElement("div", {className: "form-group"}, 
            React.createElement("label", {for: "submit"}, "Ready?"), React.createElement("br", null), 
            React.createElement("button", {type: "submit", className: "btn btn-primary form-control submit-btn"}, "Submit")
          )
          )
          )
        )
    )
    );
  }
});

module.exports = TrainingAdd;


},{"./itemlist.js":"/Users/joe/Web Development/employee-training-tracker/public/jsx/components/itemlist.js"}]},{},["./jsx/trainingadd.js"])
//# sourceMappingURL=data:application/json;base64,
