(function() {
  'use strict';
  var esutils, expect;

  expect = require('chai').expect;

  esutils = require('../');

  describe('code', function() {
    describe('isDecimalDigit', function() {
      it('returns true if provided code is decimal digit', function() {
        var ch, _i, _results;
        _results = [];
        for (ch = _i = 0; _i <= 9; ch = ++_i) {
          _results.push(expect(esutils.code.isDecimalDigit((ch + '').charCodeAt(0))).to.be["true"]);
        }
        return _results;
      });
      return it('returns false if provided code is not decimal digit', function() {
        var code, _i, _j, _ref, _ref1, _ref2, _ref3, _results;
        for (code = _i = _ref = 'a'.charCodeAt(0), _ref1 = 'z'.charCodeAt(0); _ref <= _ref1 ? _i <= _ref1 : _i >= _ref1; code = _ref <= _ref1 ? ++_i : --_i) {
          expect(esutils.code.isDecimalDigit(code)).to.be["false"];
        }
        _results = [];
        for (code = _j = _ref2 = 'A'.charCodeAt(0), _ref3 = 'Z'.charCodeAt(0); _ref2 <= _ref3 ? _j <= _ref3 : _j >= _ref3; code = _ref2 <= _ref3 ? ++_j : --_j) {
          _results.push(expect(esutils.code.isDecimalDigit(code)).to.be["false"]);
        }
        return _results;
      });
    });
    describe('isHexDigit', function() {
      it('returns true if provided code is hexadecimal digit', function() {
        var ch, code, _i, _j, _k, _ref, _ref1, _ref2, _ref3, _results;
        for (ch = _i = 0; _i <= 9; ch = ++_i) {
          expect(esutils.code.isHexDigit((ch + '').charCodeAt(0))).to.be["true"];
        }
        for (code = _j = _ref = 'a'.charCodeAt(0), _ref1 = 'f'.charCodeAt(0); _ref <= _ref1 ? _j <= _ref1 : _j >= _ref1; code = _ref <= _ref1 ? ++_j : --_j) {
          expect(esutils.code.isHexDigit(code)).to.be["true"];
        }
        _results = [];
        for (code = _k = _ref2 = 'A'.charCodeAt(0), _ref3 = 'F'.charCodeAt(0); _ref2 <= _ref3 ? _k <= _ref3 : _k >= _ref3; code = _ref2 <= _ref3 ? ++_k : --_k) {
          _results.push(expect(esutils.code.isHexDigit(code)).to.be["true"]);
        }
        return _results;
      });
      return it('returns false if provided code is not hexadecimal digit', function() {
        var code, _i, _j, _ref, _ref1, _ref2, _ref3, _results;
        for (code = _i = _ref = 'g'.charCodeAt(0), _ref1 = 'z'.charCodeAt(0); _ref <= _ref1 ? _i <= _ref1 : _i >= _ref1; code = _ref <= _ref1 ? ++_i : --_i) {
          expect(esutils.code.isHexDigit(code)).to.be["false"];
        }
        _results = [];
        for (code = _j = _ref2 = 'G'.charCodeAt(0), _ref3 = 'Z'.charCodeAt(0); _ref2 <= _ref3 ? _j <= _ref3 : _j >= _ref3; code = _ref2 <= _ref3 ? ++_j : --_j) {
          _results.push(expect(esutils.code.isHexDigit(code)).to.be["false"]);
        }
        return _results;
      });
    });
    describe('isOctalDigit', function() {
      it('returns true if provided code is octal digit', function() {
        var ch, _i, _results;
        _results = [];
        for (ch = _i = 0; _i <= 7; ch = ++_i) {
          _results.push(expect(esutils.code.isOctalDigit((ch + '').charCodeAt(0))).to.be["true"]);
        }
        return _results;
      });
      return it('returns false if provided code is not octal digit', function() {
        var ch, code, _i, _j, _k, _ref, _ref1, _ref2, _ref3, _results;
        for (ch = _i = 8; _i <= 9; ch = ++_i) {
          expect(esutils.code.isOctalDigit((ch + '').charCodeAt(0))).to.be["false"];
        }
        for (code = _j = _ref = 'a'.charCodeAt(0), _ref1 = 'z'.charCodeAt(0); _ref <= _ref1 ? _j <= _ref1 : _j >= _ref1; code = _ref <= _ref1 ? ++_j : --_j) {
          expect(esutils.code.isOctalDigit(code)).to.be["false"];
        }
        _results = [];
        for (code = _k = _ref2 = 'A'.charCodeAt(0), _ref3 = 'Z'.charCodeAt(0); _ref2 <= _ref3 ? _k <= _ref3 : _k >= _ref3; code = _ref2 <= _ref3 ? ++_k : --_k) {
          _results.push(expect(esutils.code.isOctalDigit(code)).to.be["false"]);
        }
        return _results;
      });
    });
    describe('isWhiteSpace', function() {
      it('returns true if provided code is white space', function() {
        var code, codes, _i, _len, _results;
        codes = [0x0009, 0x000B, 0x000C, 0x0020, 0x00A0, 0xFEFF, 0x1680, 0x180E, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A, 0x202F, 0x205F, 0x3000];
        _results = [];
        for (_i = 0, _len = codes.length; _i < _len; _i++) {
          code = codes[_i];
          _results.push(expect(esutils.code.isWhiteSpace(code)).to.be["true"]);
        }
        return _results;
      });
      return it('returns false if provided code is not white space', function() {
        var ch, code, _i, _j, _k, _ref, _ref1, _ref2, _ref3, _results;
        for (ch = _i = 0; _i <= 9; ch = ++_i) {
          expect(esutils.code.isWhiteSpace((ch + '').charCodeAt(0))).to.be["false"];
        }
        for (code = _j = _ref = 'a'.charCodeAt(0), _ref1 = 'z'.charCodeAt(0); _ref <= _ref1 ? _j <= _ref1 : _j >= _ref1; code = _ref <= _ref1 ? ++_j : --_j) {
          expect(esutils.code.isWhiteSpace(code)).to.be["false"];
        }
        _results = [];
        for (code = _k = _ref2 = 'A'.charCodeAt(0), _ref3 = 'Z'.charCodeAt(0); _ref2 <= _ref3 ? _k <= _ref3 : _k >= _ref3; code = _ref2 <= _ref3 ? ++_k : --_k) {
          _results.push(expect(esutils.code.isWhiteSpace(code)).to.be["false"]);
        }
        return _results;
      });
    });
    describe('isLineTerminator', function() {
      it('returns true if provided code is line terminator', function() {
        var code, codes, _i, _len, _results;
        codes = [0x000A, 0x000D, 0x2028, 0x2029];
        _results = [];
        for (_i = 0, _len = codes.length; _i < _len; _i++) {
          code = codes[_i];
          _results.push(expect(esutils.code.isLineTerminator(code)).to.be["true"]);
        }
        return _results;
      });
      return it('returns false if provided code is not line terminator', function() {
        var ch, code, _i, _j, _k, _ref, _ref1, _ref2, _ref3, _results;
        for (ch = _i = 0; _i <= 9; ch = ++_i) {
          expect(esutils.code.isLineTerminator((ch + '').charCodeAt(0))).to.be["false"];
        }
        for (code = _j = _ref = 'a'.charCodeAt(0), _ref1 = 'z'.charCodeAt(0); _ref <= _ref1 ? _j <= _ref1 : _j >= _ref1; code = _ref <= _ref1 ? ++_j : --_j) {
          expect(esutils.code.isLineTerminator(code)).to.be["false"];
        }
        _results = [];
        for (code = _k = _ref2 = 'A'.charCodeAt(0), _ref3 = 'Z'.charCodeAt(0); _ref2 <= _ref3 ? _k <= _ref3 : _k >= _ref3; code = _ref2 <= _ref3 ? ++_k : --_k) {
          _results.push(expect(esutils.code.isLineTerminator(code)).to.be["false"]);
        }
        return _results;
      });
    });
    describe('isIdentifierStart', function() {
      it('returns true if provided code can be a start of Identifier', function() {
        var characters, code, _i, _len, _ref, _results;
        characters = ['a', '$', '_', 'ゆ'];
        _ref = characters.map(function(ch) {
          return ch.charCodeAt(0);
        });
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          code = _ref[_i];
          _results.push(expect(esutils.code.isIdentifierStart(code)).to.be["true"]);
        }
        return _results;
      });
      return it('returns false if provided code cannot be a start of Identifier', function() {
        var ch, _i, _results;
        _results = [];
        for (ch = _i = 0; _i <= 9; ch = ++_i) {
          _results.push(expect(esutils.code.isIdentifierStart((ch + '').charCodeAt(0))).to.be["false"]);
        }
        return _results;
      });
    });
    return describe('isIdentifierPart', function() {
      it('returns true if provided code can be a part of Identifier', function() {
        var ch, characters, code, _i, _j, _len, _ref, _results;
        characters = ['a', '_', '$', 'ゆ'];
        _ref = characters.map(function(ch) {
          return ch.charCodeAt(0);
        });
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          code = _ref[_i];
          expect(esutils.code.isIdentifierPart(code)).to.be["true"];
        }
        _results = [];
        for (ch = _j = 0; _j <= 9; ch = ++_j) {
          _results.push(expect(esutils.code.isIdentifierPart((ch + '').charCodeAt(0))).to.be["true"]);
        }
        return _results;
      });
      return it('returns false if provided code cannot be a part of Identifier', function() {
        expect(esutils.code.isIdentifierPart('+'.charCodeAt(0))).to.be["false"];
        return expect(esutils.code.isIdentifierPart('-'.charCodeAt(0))).to.be["false"];
      });
    });
  });

}).call(this);
